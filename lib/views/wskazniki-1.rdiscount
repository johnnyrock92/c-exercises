<a name="PNTRS1"></a>

<h3>    Wskaźniki</h3>

<blockquote><a href="http://www.ariel.com.au/jokes/The_Evolution_of_a_Programmer.html">The
  Evolution of a Programmer</a>
</blockquote>

<p><b>Zadanie 1.</b>
Uzupełnij poniższy kod, tak aby powstał działający program:
</p>
<code lang="ansic">
void kwadrat (int *n){
  /* podnieś liczbę *n do kwadratu */
  ...
}
int main()
{
  int liczba = 5;
  int *wsk = ...;
  kwadrat(wsk);
  printf(...);  /* wypisujemy liczbę 5 i jej kwadrat 25 */
  return 0;
}
</code>

<p><b>Zadanie 2.</b>
Uzupełnić tabelę
<kbd>int tab[10]</kbd> kolejnymi liczbami parzystymi zaczynając od 10.
Korzystając z wskaźników wysumować wartości elementów tablicy
<kbd>tab</kbd>, a następnie sumę wypisać na ekranie.
</p>

<p><b>Zadanie 3.</b>
Napisz program, który korzysta z dwóch
tablic. Jedna to tablica 10 różnych liczb całkowitych z
zakresu 1..10, druga to tablica wskaźników na liczby całkowite.
Przeprowadź proste przeszukiwanie tablicy liczb w celu odszukania
najmniejszej i zapamiętaj jej wskaźnik w tablicy wskaźników.
Potem poszukaj kolejnej i ponownie zapamiętaj jej wskaźnik na
następnym miejscu w tablicy wskaźników. W ten sposób utwórz całą
tablicę wskaźników. Zwróć uwagę na to, że takim sposobem możesz
posortować nieduże tablice liczb całkowitych bez konieczności
zmiany w nich kolejności danych. Wypisz na ekran zawartość obu
tablic.
<i>Wskazówka</i>: skorzystaj z programu <kbd>cdecl</kbd>;
uruchom program <kbd>cdecl</kbd> i wpisz:
<kbd>declare a as array 10 of pointer to int</kbd>;
przeczytaj stronę manuala programu <kbd>cdecl</kbd>
</p>

<p><b>Zadanie 4.</b> Zadeklaruj w programie tablicę
dziesięcioelementową wskaźników do tablic pięcioelementowych
wskaźników na liczby rzeczywiste. Następnie wczytaj do tej tablicy
kilka liczb. Wypisz na wyjście te liczby.
<i>Wskazówka</i>: skorzystaj z programu <kbd>cdecl</kbd>
</p>

<p><b>Zadanie 5.</b> Napisz program <kbd>tail</kbd> wypisujący
<i>n</i> ostatnich wierszy tekstu podanego na wejściu.
Domyślną wartością <i>n</i> jest 10, ale wartość tę można
zmienić za pomocą opcjonalnego argumentu wywołania programu.
Na przykład, każde z poleceń</p>
<pre>tail  -n 5
tail  --lines 5
</pre>
<p>spowoduje wypisanie 5 ostatnich wierszy.
Program powinien działac sensownie niezależnie od tego,
jak nierozsądne są dane wejściowe lub wartość <i>n</i>.
Przygotować zestaw testów pokazujących
`rozsądne zachowanie' programu.<br/>
Uwaga 1: wiersze powinny być gromadzone w tablicy
wskaźników do char.<br/>
Uwaga 2: do programu
dodać dodatkowe opcje: `author', `help' i `version';
do obsługi opcji wykorzystać funkcję
<kbd>getopt_long</kbd> albo skorzystać z biblioteki <kbd>popt</kbd>
(przykłady użycia można znaleźć na stronach manuala).
</p>
